{"version":3,"sources":["components/AboutUs.tsx","actions/actionConstant.ts","actions/contactusAction.ts","reducers/ContacUsReducer.ts","components/ContactUs.tsx","reducers/IntroPagesReducer.ts","components/PageListComponent.tsx","components/Pages.tsx","components/PageViewer.tsx","components/TimeComponent.tsx","App.tsx","apis/PagesApi.ts","apis/BaseApi.ts","actions/IntroPagesAction.ts","registerServiceWorker.ts","Store/store.ts","index.tsx"],"names":["_super","AboutUs","Object","tslib_es6","prototype","render","document","title","react","FETCH_INTROPAGES_SUCCESS","FETCH_INTROPAGES_FAIL","CONTACT_US_CHANGE_NAME","CONTACT_US_CHANGE_EMAIL","CONTACT_US_CHANGE_DESC","ChangeNameAction","surname","name","type","ChangeDescAction","description","desc","ChangeEmailAction","cEmail","email","initState","Desc","Email","Name","getName","state","getEmail","getDesc","ContactUs_ContactUs","ContactUs","props","_this","call","this","Send","bind","blurHandlingForEmail","blurHandlingForName","changeHanhleing","blurHandlingForDesc","event","ChangeName","target","value","ChangeEmail","ChangeDesc","alert","className","onChange","onBlur","placeholder","rows","id","onClick","components_ContactUs","es","contactusState","dispatch","redux","IntroPagesReducer_initState","error","items","loaded","getIntroPages","getError","getLoaded","ItemTemp","_a","info","index","IsNew","src","IntroImg","onError","elem","currentTarget","alt","Title","react_router_dom","key","to","IntroInfo","PageListComponent_PageListComponent","PageListComponent","map","components_PageListComponent","introPageState","Pages","PageViewer","getPageName","match","params","TimeComponent","componentDidMount","that","interval","setInterval","setTime","componentWillUnmount","time","setState","Date","toLocaleTimeString","src_App_0","App","menuIsOpen","menuOnClick","menuDropdownRef","jquery","current","hide","show","basename","components_TimeComponent","Navbar","expand","bg","variant","Toggle","aria-controls","Collapse","Nav","Item","activeClassName","react_router","exact","path","component","components_Pages","components_AboutUs","components_PageViewer","PagesApi","GetIntroInfoList","get","sent","data","BaseApi","axiosObj","axios_default","a","create","baseURL","url","config","then","response","catch","console","log","FetchIntroPagesByApi","apis_PagesApi","err","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","rootReaducer","action","appStore","redux_thunk_es","rootElement","getElementById","react_dom","store","URL","toString","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e266c841.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\nexport default class AboutUs extends React.Component {\r\n    public render() {\r\n        document.title = \"About React Demo Site\";\r\n\r\n        return (<div>about us ... </div>)\r\n    }\r\n}","\r\nexport const VIEW_PAGE = 'VIEW_PAGE';\r\nexport const FETCH_INTROPAGES_SUCCESS = \"FETCH_INTROPAGES_SUCCESS\";\r\nexport const FETCH_INTROPAGES_FAIL = \"FETCH_INTROPAGES_FAIL\";\r\n\r\n\r\nexport const CONTACT_US_CHANGE_NAME = \"CONTACT_US_CHANGE_NAME\"\r\nexport const CONTACT_US_CHANGE_EMAIL = \"CONTACT_US_CHANGE_EMAIL\"\r\nexport const CONTACT_US_CHANGE_DESC = \"CONTACT_US_CHANGE_DESC\"\r\n","import { CONTACT_US_CHANGE_DESC, CONTACT_US_CHANGE_EMAIL, CONTACT_US_CHANGE_NAME } from './actionConstant';\r\nimport { IContactUsChangeDescAction, IContactUsChangeEmailAction, IContactUsChangeNameAction } from './actionTypes';\r\n\r\nexport function ChangeNameAction(surname: string): IContactUsChangeNameAction {\r\n    return {\r\n        name: surname,\r\n        type: CONTACT_US_CHANGE_NAME,\r\n    }\r\n}\r\n\r\nexport function ChangeDescAction(description: string): IContactUsChangeDescAction {\r\n    return {\r\n        desc: description,\r\n        type: CONTACT_US_CHANGE_DESC,\r\n    }\r\n}\r\n\r\nexport function ChangeEmailAction(cEmail: string): IContactUsChangeEmailAction {\r\n    return {\r\n        email: cEmail,\r\n        type: CONTACT_US_CHANGE_EMAIL,\r\n    }\r\n}","import { CONTACT_US_CHANGE_DESC, CONTACT_US_CHANGE_EMAIL, CONTACT_US_CHANGE_NAME } from 'src/actions/actionConstant';\r\nimport { ContactUsActionType } from 'src/actions/actionTypes';\r\nimport { IContacUsState } from 'src/Store/AllStates';\r\n\r\nconst initState: IContacUsState = {\r\n    Desc: \"\",\r\n    Email: \"\",\r\n    Name: \"\",\r\n\r\n};\r\n\r\nexport function ContactUsProducer(state: IContacUsState = initState, action: ContactUsActionType) {\r\n\r\n    switch (action.type) {\r\n        case CONTACT_US_CHANGE_NAME:\r\n            return {\r\n                ...state,\r\n                Name: action.name,\r\n            }\r\n        case CONTACT_US_CHANGE_EMAIL:\r\n            return {\r\n                ...state,\r\n                Email: action.email,\r\n            }\r\n        case CONTACT_US_CHANGE_DESC:\r\n            return {\r\n                ...state,\r\n                Desc: action.desc,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getName = (state: IContacUsState) => state.Name;\r\nexport const getEmail = (state: IContacUsState) => state.Email;\r\nexport const getDesc = (state: IContacUsState) => state.Desc;\r\n","import * as React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators, Dispatch } from 'redux';\r\nimport { ChangeDescAction, ChangeEmailAction, ChangeNameAction } from 'src/actions/contactusAction';\r\nimport { getDesc, getEmail, getName } from 'src/reducers/ContacUsReducer';\r\nimport { IContacUsState } from 'src/Store/AllStates';\r\nimport { IAppState } from 'src/Store/store';\r\n\r\ninterface IContacUsProps {\r\n    Name: string,\r\n    Email: string,\r\n    Desc: string,\r\n    ChangeName: (name: string) => void;\r\n    ChangeEmail: (email: string) => void;\r\n    ChangeDesc: (desc: string) => void;\r\n}\r\n\r\nclass ContactUs extends React.Component<IContacUsProps, IContacUsState> {\r\n\r\n    constructor(props: IContacUsProps) {\r\n        super(props);\r\n\r\n        this.Send = this.Send.bind(this);\r\n        this.blurHandlingForEmail = this.blurHandlingForEmail.bind(this);\r\n        this.blurHandlingForName = this.blurHandlingForName.bind(this);\r\n        this.changeHanhleing = this.changeHanhleing.bind(this);\r\n        this.blurHandlingForDesc = this.blurHandlingForDesc.bind(this);\r\n    }\r\n\r\n    // tslint:disable-next-line: no-empty\r\n    public changeHanhleing(event: React.ChangeEvent<HTMLInputElement>) {\r\n\r\n    }\r\n    public blurHandlingForName(event: React.FocusEvent<HTMLInputElement>) {\r\n        this.props.ChangeName(event.target.value);\r\n    }\r\n\r\n    public blurHandlingForEmail(event: React.FocusEvent<HTMLInputElement>) {\r\n        this.props.ChangeEmail(event.target.value);\r\n    }\r\n\r\n    public blurHandlingForDesc(event: React.FocusEvent<HTMLTextAreaElement>) {\r\n        this.props.ChangeDesc(event.target.value);\r\n    }\r\n\r\n    public Send() {\r\n        alert(\"Thanks \" +this.props.Name);\r\n    }\r\n\r\n    public render() {\r\n        document.title = \"Countact us\";\r\n\r\n        return (<div className=\"contact-us-form\" ><div className=\"desc-top\">\r\n            Please send to us, your opinions and suggestions. </div>\r\n            <div className=\"form-group\">\r\n                <label>Name\r\n\r\n                <input className=\"form-control\" onChange={this.changeHanhleing}\r\n                        onBlur={this.blurHandlingForName} type=\"text\" placeholder=\"please enter your name.\" />\r\n                </label>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Email\r\n                <input className=\"form-control\" type=\"email\" onBlur={this.blurHandlingForEmail}\r\n                        onChange={this.changeHanhleing} placeholder=\"please enter your Email.\" />\r\n\r\n                </label>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <label>Description\r\n                <textarea className=\"form-control\" rows={5} onBlur={this.blurHandlingForDesc}\r\n                        placeholder=\"please enter your description.\" />\r\n\r\n                </label>\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <input type=\"button\" id=\"sendBtn\" value=\"Send\" onClick={this.Send} />   </div>\r\n        </div>)\r\n    }\r\n}\r\nconst mapStateToProps = (state: IAppState) => {\r\n    return {\r\n        Desc: getDesc(state.contactusState),\r\n        Email: getEmail(state.contactusState),\r\n        Name: getName(state.contactusState),\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({\r\n    ChangeDesc: ChangeDescAction,\r\n    ChangeEmail: ChangeEmailAction,\r\n    ChangeName: ChangeNameAction,\r\n}, dispatch)\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactUs);","import { IntroPagesActionTypes } from 'src/actions/actionTypes';\r\nimport { IIntroPagesState } from 'src/Store/AllStates';\r\nimport { FETCH_INTROPAGES_FAIL, FETCH_INTROPAGES_SUCCESS } from '../actions/actionConstant';\r\n\r\n\r\nconst initState: IIntroPagesState = {\r\n    error: \"\",\r\n    items: [],\r\n    loaded: false,\r\n}\r\n\r\nexport default function IntroPagesRoducer(state = initState, action: IntroPagesActionTypes) {\r\n    switch (action.type) {\r\n        case FETCH_INTROPAGES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                error: \"\",\r\n                items: action.items,\r\n                loaded: action.loaded,\r\n            }\r\n        case FETCH_INTROPAGES_FAIL:\r\n            return {\r\n                ...state,\r\n                items: [],\r\n                loaded: action.loaded,\r\n                // tslint:disable-next-line: object-literal-sort-keys\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const getIntroPages = (state: IIntroPagesState) => state.items;\r\nexport const getError = (state: IIntroPagesState) => state.error;\r\nexport const getLoaded = (state: IIntroPagesState) => state.loaded;\r\n","import 'bootstrap/dist/css/bootstrap.css'\r\nimport * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom'\r\nimport {IPageIntroInfo } from 'src/Entities/Interfaces';\r\nimport { getError, getIntroPages, getLoaded } from 'src/reducers/IntroPagesReducer';\r\nimport { IIntroPagesState } from 'src/Store/AllStates';\r\nimport { IAppState } from 'src/Store/store';\r\nimport '../styles/PageComponent.scss'\r\n\r\ninterface IProps {\r\n  error: string,\r\n  items: IPageIntroInfo[],\r\n  loaded: boolean,\r\n}\r\ninterface IItemPeops {\r\n  info: IPageIntroInfo,\r\n  index: number\r\n}\r\n\r\nexport const ItemTemp: React.FunctionComponent<IItemPeops> = ({ info, index }) =>\r\n  <div className=\"ss-col-4\">\r\n    <div className=\"page-item\">\r\n      <div className={info.IsNew !== true ? \"new-badge-hidden\" : \"new-badge\"} >\r\n        <span className=\"rotate-span\">New</span></div>\r\n      <div className=\"page-item-header\">\r\n        <img src={process.env.PUBLIC_URL + '/images/' + info.IntroImg}\r\n          // tslint:disable-next-line: jsx-no-lambda\r\n          onError={(elem) => elem.currentTarget.className = \"img-not-found\"} className=\"page-item-img\" alt={info.Title} />\r\n        <div className=\"page-item-title\">\r\n          <NavLink\r\n            key={index} to={'/Page/' + info.Title} >{info.Title}</NavLink>\r\n        </div>\r\n      </div>\r\n      <div className=\"page-item-info\" >{info.IntroInfo}</div>\r\n    </div>\r\n  </div>\r\n\r\nclass PageListComponent extends React.Component<IProps, IIntroPagesState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"page-container\">\r\n        <div className=\"ss-row\" >\r\n          {this.props.items.map((info, index) => {\r\n            return <ItemTemp key={index} info={info} index={index} />\r\n          })}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n/*\r\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators({\r\n  loadData: FetchIntroPagesByApi\r\n}, dispatch);\r\n*/\r\nconst mapStateToProps = (state: IAppState) => (\r\n  {\r\n    error: getError(state.introPageState),\r\n    items: getIntroPages(state.introPageState),\r\n    loaded: getLoaded(state.introPageState)\r\n  }\r\n)\r\n\r\nexport default connect(mapStateToProps)(PageListComponent)","import * as React from'react'\r\nimport PageListComponent from './PageListComponent'\r\n\r\nexport default class Pages extends React.Component{\r\n\r\n    public render(){\r\n\r\n        return (\r\n            \r\n            <PageListComponent/>\r\n            \r\n        )\r\n    }\r\n}","import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IPageViewProps } from \"src/Entities/Interfaces\";\r\n\r\nexport default class PageViewer extends React.Component<IPageViewProps> {\r\n  public render() {\r\n    const name = this.getPageName();\r\n    document.title = name;\r\n    return (\r\n      <div className=\"page-viewer-container\">\r\n        <h2>{name}</h2>\r\n        <p>\r\n          This a static content with dynamic title. this is a fixed content for demo.\r\n        </p>\r\n        <p>\r\n          this part is about <span className=\"content-title\">{name} </span>subject.\r\n        </p>\r\n        <p>\r\n         content content content content content content\r\n        </p>\r\n\r\n        <hr />\r\n        <Link to=\"/\">Home</Link>\r\n      </div>\r\n    );\r\n  }\r\n  private getPageName() {\r\n    return this.props.match.params.Name;\r\n  }\r\n}\r\n","import * as React from 'react'\r\ninterface ITimeState{\r\n   time:string;\r\n}\r\nexport default class TimeComponent extends React.Component<{},ITimeState> {\r\n    private static interval: any;\r\n   \r\n    public componentDidMount() {\r\n        const that = this;\r\n\r\n        TimeComponent.interval = setInterval(() => {\r\n            that.setTime();\r\n        }, 1000);\r\n    }\r\n    public componentWillUnmount() {\r\n        if (TimeComponent.interval) {\r\n            delete TimeComponent.interval;\r\n        }\r\n    }\r\n    public render() {\r\n        return (<div className=\"time-container\">{this.state ? this.state.time: \"\"}</div>)\r\n    }\r\n    private setTime() {\r\n        this.setState({time:new Date().toLocaleTimeString()});\r\n    }\r\n}","import '@babel/polyfill';\r\nimport \"bootstrap/scss/bootstrap.scss\";\r\nimport * as $ from 'jquery';\r\nimport * as React from 'react';\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { NavLink } from 'react-router-dom'\r\nimport './App.scss';\r\nimport AboutUs from './components/AboutUs';\r\nimport ContactUs from './components/ContactUs';\r\nimport Pages from './components/Pages'\r\nimport PageViewer from './components/PageViewer';\r\nimport TimeComponent from './components/TimeComponent'\r\n\r\nclass App extends React.Component {\r\n  private menuDropdownRef: any;\r\n  private menuIsOpen: boolean = false;\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.menuOnClick = this.menuOnClick.bind(this);\r\n    this.menuDropdownRef = React.createRef();\r\n  }\r\n\r\n  public menuOnClick() {\r\n    if (!this.menuIsOpen) {\r\n      $(this.menuDropdownRef.current).show();\r\n      this.menuIsOpen = true;\r\n    }\r\n    else {\r\n      $(this.menuDropdownRef.current).hide();\r\n      this.menuIsOpen = false;\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <h1 className=\"App-title\">React App Demo</h1>\r\n            <div className=\"title\">\r\n              <div className=\"app-time\">\r\n                <TimeComponent />\r\n              </div>\r\n            </div>\r\n          </header>\r\n          <div className=\"app-menubar\">\r\n            <Navbar className=\"navbar navbar-inverse\" expand=\"md\" bg=\"drak\" variant=\"dark\">\r\n              <Navbar.Toggle aria-controls=\"myNavbar\" />\r\n              <Navbar.Collapse className=\"navbar-right\" id=\"myNavbar\">\r\n                <Nav className=\"mr-auto\">\r\n                  <Nav.Item ><NavLink to=\"/Home\" activeClassName=\"active-page\" className=\"nav-link \">Home</NavLink></Nav.Item>\r\n                  <Nav.Item ><NavLink to=\"/ContactUs\" activeClassName=\"active-page\" className=\"nav-link\">Contact Us</NavLink></Nav.Item>\r\n                  <Nav.Item ><NavLink to=\"/AboutUs\" activeClassName=\"active-page\" className=\"nav-link\">About Us</NavLink></Nav.Item>\r\n                </Nav>\r\n              </Navbar.Collapse>\r\n            </Navbar>\r\n          </div>\r\n          <div className=\"pages-container\">\r\n            <Route exact={true} path=\"/\" component={Pages} />\r\n            <Route path=\"/Home\" component={Pages} />\r\n            <Route path=\"/ContactUs\" component={ContactUs} />\r\n            <Route path=\"/AboutUs\" component={AboutUs} />\r\n            <Route path=\"/Page/:Name\" component={PageViewer} />\r\n          </div>\r\n          <div className=\"App-footer\">@Copy 2019 (version 2.0)</div>\r\n        </div>\r\n      </Router>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import BaseApi from './BaseApi';\r\n\r\nexport default class PagesApi extends BaseApi{\r\n\r\n   public async GetIntroInfoList()\r\n   {\r\n       const response = await this.get(\"/data.json\");\r\n\r\n           return response.data;\r\n\r\n   }\r\n}","import axios from 'axios'\r\n\r\nexport default class BaseApi {\r\n\r\n    private axiosObj = axios.create({\r\n        baseURL: process.env.PUBLIC_URL\r\n    });\r\n\r\n    public get(url: string,config:{}={}) {\r\n        return this.axiosObj.get(url,config)\r\n            .then((response: any) => {\r\n                return response;\r\n            })\r\n            .catch(error => {\r\n                // tslint:disable-next-line: no-console\r\n                console.log(error);\r\n            });\r\n    }\r\n}","import { ActionCreator, Dispatch } from 'redux'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport PagesApi from 'src/apis/PagesApi';\r\nimport {IPageIntroInfo} from 'src/Entities/Interfaces';\r\nimport { IIntroPagesState } from 'src/Store/AllStates';\r\nimport { FETCH_INTROPAGES_FAIL, FETCH_INTROPAGES_SUCCESS } from './actionConstant';\r\nimport { IntroPagesActionTypes } from './actionTypes';\r\n\r\n\r\n\r\nexport const FetchIntroPagesByApi: ActionCreator<\r\n    ThunkAction<Promise<any>, IIntroPagesState, null, IntroPagesActionTypes>> = () => {\r\n\r\n        return async (dispatch: Dispatch) => {\r\n            const pagesApi = new PagesApi();\r\n            pagesApi.GetIntroInfoList()\r\n                .then((data: IPageIntroInfo[]) => {\r\n                    dispatch({\r\n                        items: data,\r\n                        loaded: true,\r\n                        type: FETCH_INTROPAGES_SUCCESS,\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    dispatch({\r\n                        error: err,\r\n                        loaded: false,\r\n                        type: FETCH_INTROPAGES_FAIL\r\n                    })\r\n                });\r\n        }\r\n    }","// tslint:disable:no-console\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n      window.location.toString()\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a 'New content is\r\n                // available; please refresh.' message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // 'Content is cached for offline use.' message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type')!.indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { applyMiddleware, combineReducers, createStore, Store } from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport { ContactUsProducer } from 'src/reducers/ContacUsReducer';\r\nimport IntroPagesReducer from '../reducers/IntroPagesReducer'\r\nimport { IContacUsState, IIntroPagesState } from './AllStates';\r\n\r\nexport interface IAppState {\r\n    introPageState: IIntroPagesState,\r\n    contactusState: IContacUsState,\r\n}\r\n\r\nconst rootReaducer = combineReducers<IAppState>({\r\n    contactusState: ContactUsProducer,\r\n    introPageState: IntroPagesReducer,\r\n});\r\n\r\nexport function configStore(): Store<IAppState, any> {\r\n    const store = createStore(rootReaducer, applyMiddleware(thunk));\r\n    return store;\r\n}\r\n\r\nexport const appStore = configStore();","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport App from './App';\r\n\r\nimport { FetchIntroPagesByApi } from './actions/IntroPagesAction';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { appStore } from './Store/store';\r\n\r\nfunction initApp() {\r\n  appStore.dispatch(FetchIntroPagesByApi());\r\n}\r\nconst rootElement = document.getElementById('root');\r\ninitApp();\r\nReactDOM.render(\r\n  <Provider store={appStore}>\r\n    <App />\r\n  </Provider>,\r\n  rootElement\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}